Okay, let's get started. I hope everybody's doing well today. The objective for today's class is to continue our discussion about backup and recovery. Specifically, we have a backup schedule, and we need to determine when backup should be performed and identify certain types of recovery scenarios depending upon when the failure occurs. So, we're going to be discussing different type of backup scenarios, and each scenario we're going to evaluate each of these different solutions based on the speed of recovery, how much data loss we have, and the cost of implementation, and then we're going to keep improving it, and keep improving, improving until we make it faster, better, and we lose less and less data, okay? So, we have our schedule, and just to reiterate right here, so this is when my database is active, right in here, okay? And let's say that we have, you know, 10 terabytes, and it takes, you know, 12 hours, so the backup, you know, occurs here, over here, so this is the backup for each day, and the backup also continues on these days, over here, okay? So, backup number one, you know, starts on Monday night, and backup number one continues on Tuesday, so backup number, you know, two starts here, so backup two, this is backup three, backup three continues the next morning, this is, you know, backup number four, backup four, so this is backup five, and finally, backup five occurs, okay? So far, so good, okay, so what's the scenario if the database grows, so as time progresses, you have more and more customers being added to your database, there's more transactions, your tables get larger, there's more rows, so database size increases, so now it's like 20 terabytes, so let's say that it takes, let's say, 24 hours to perform the backup, okay? So, remember, when the database is active, like, I can't do a backup, because the database needs to be in a consistent state to do a backup, meaning the data can't be changing, all the values in my tables need to stay, you know, as they were, so I'm backing up as the database exists, as of, let's say, 7 p.m., Monday through Friday, that's the state that it's in, database is not active, there's no users that are connected to the database, there's no, there's no changes, okay? So, I need 24 hours to do the backup, because that's how long it takes to write all my data, like, out to a tape each night, so how are we going to do that? I don't have 24 hours each night to do a backup, so what are your thoughts? How can I do a backup each night if I don't have 24 hours to do the backup? Can we pause the backup during the afternoon, the morning to afternoon? Well, the database is active from, you know, like, 8 a.m. until, like, 7 p.m., so I could start the backup at, like, 7 p.m., but I have to, you know, stop the backup when the database gets active the next morning, you know, at 8 a.m. So, you're asking me to do the backup, like, 2 o'clock in the afternoon? I'm not sure what you're saying. No, like, I meant that, so we should, like, pause the backup from 8 o'clock to 6 o'clock, 8 a.m. to 6 p.m., and once the backup, I mean, once the day is over, we could, like, continue the backup. Okay, so you're saying that the backup for, so I'm on Monday, and I conduct business from 8 a.m. until 6 p.m. on Monday, then the database on Monday begins, so I'm on Monday, then the database on Monday begins at, you know, Monday at, you know, 7 p.m., and it continues. Then you're saying pause the Monday backup because I'm getting to Tuesday, 8 a.m., pause it until, like, 7 p.m., then resume rather than, so I'm doing the backup number one, this is the Monday backup, so I'm continuing it another 12 hours, so this is backup number one, this is, like, continuing for the Monday backup, so then when I hit Wednesday at 8 a.m., the backup for Monday is complete. Yeah, yeah. Okay, so what do people think about that? So we're going to evaluate. Any time somebody asks you what you think or to evaluate something in computers, you know, so what's your evaluation of having the Monday backup, you know, continue until Tuesday and then finally finish on Wednesday? Okay. What's the speed of implementing this? It's very inefficient. Well, let's look at this, so speed. What's the speed of implementing all this? How long does it take to do the backup that begins on Monday? Five hours. Well, it starts at 1024, 7 p.m., and then it ends when? 11 p.m. Right, 1026 at, like, you know, 7 a.m., according to this scenario. So, basically, it takes two days to do the backup for one day. So, reliability. Am I backing up all my data, true or false? True. Okay, backing up all your data for true or false. Okay, and so what's the cost of implementing this? Well, the cost of having a physical tape drive and a, you know, a tape in order to save my data. So, let's say I have somebody working, you know, third shift that's actually doing this. So, the cost is less of an issue. But what do you think about this? For every day, for Monday, it takes two days to do a backup. For Monday, it takes two days to do a backup. So, that means, when am I doing the Tuesday backup? So, I'm doing a Tuesday backup on Thursday. So, what am I doing the Wednesday backup? Friday. Friday. So, what's the â€“ remember, you're doing a backup. Let's do it in reverse. What's the recovery scenario? I do a backup on Monday, and a backup on Monday takes two days. What happens if I have a failure at the end of the day on Tuesday? I have a failure right here. I'm still backing up. Remember, when this continues, I'm still backing up Monday's backup. So, then I can't recover from the Tuesday because the Tuesday was never backed up. So, then I lose all this. So, the whole purpose of the backup is to, you know, make a copy of my data, you know, like each day. So, here I'm like skipping a day. And it's going to impact me when I perform a recovery. So, this is taking too long. I need to increase the speed of the backup, meaning that the backup for Monday completes by the next morning, you know, like right here. It has to, like, complete. So, when my database gets turned on on Tuesday at 8 a.m., I'm back in business. I'm back in business. So, how do I make the backup go faster? Remember, 10 hours takes for, you know, 10 hours takes 12 hours, 10 terabytes takes 12 hours, and 20 terabytes takes 24. How do I make this backup here go faster so it completes by the next morning? Can we backup on two databases? What does that mean? Like split the backup to two databases. So, what are my two databases that I'm backing up? Like one database we will split half of the data to and the other, another database. Okay. So, you're saying that I take this database and take, of my 20 terabytes, 20 terabytes, write 10 terabytes to one place and write 10 terabytes to another place? Yeah. Okay. So, the challenge with that is now I have my backup split across, you know, two different tapes. So, that's going to cost more because I'm going to have to buy more tapes. I'm going to have to buy a tape, you know, drive in order to write all my data to. So, that kind of increases the complexity. Now I have to keep track of two tapes. So, it's certainly a solution. I could, you know, just add more and more tapes and have those tapes run in parallel. Okay. That'll work. Give me another solution where you're not spending any money. So, your cost that you just suggested, true, I will complete in time, but it will cost twice as much. How can I increase the speed of my backup without spending any money? Often you're presented with, you know, problems where your manager will give you money to solve the problem and other times they'll give you no money to solve the problem. So, how can I increase the speed of the backup and have this backup finished by the next morning? What are your thoughts? So, you just add a whole lot of preparation before coming to class. That's not good. That's going to impact you a lot. Okay. So, let's say that we have a table and in my table, I have my customer table. Let's keep it simple. So, we have a student table. So, Queens College has 17,000 students. So, that means my student table is going to have 17,000 rows. What other rows are going to be in the student table besides the 17,000 rows for the current students? Can you repeat? How many rows are going to be in the student table? Is it not just 17,000? So, how do you want to handle the students that graduated? Okay. So, we have 17,000 rows plus we have all the rows from the students that graduated. Why do we have to keep track of the current students and why do we have to keep track of the graduated students in the student table? What's the college responsible for maintaining forever? The students' records. Specifically, what type of record? What does the college need to track about you forever? Their grades. Their grades. Well, your grades. And the grades lead to what? Transcript. The transcript. And the transcript leads to what? Eventually, the transcript will be completed. And at the time of completion, then that leads to what? The degree. The degree. How long? So, how do you prove, you know, to a future employer or to a graduate school how do you prove that you have a degree? What's the method that you would prove that you have a degree? Did you ever wonder, like, how are you going to prove you have a degree? The school sends an official copy of it. The school sends you what? Transcript. The transcript. And the transcript lists every course that you took and it totals up the credits. And then the top right-hand corner, it's going to say, you know, date of graduation. And it's going to say right below that, degree awarded. And it's going to list computer science, mathematics, whatever the degree is. Okay. How does the college generate that transcript? What are the two tables that they need to generate that transcript? The student table to fill in your name. And what other table? Classes. Like a registration table. The registration table, if you take five classes a semester, it's going to have five rows on it. Okay. So, over one semester, 17,000 students, it's going to contain hundreds of thousands of rows. How long can you ask the college to send your transcripts? When can you make that request? And for how long can you make that request? After graduation and forever. Like forever. Well, not forever. I mean, you're not going to be making a request 9,000 years from now, but potentially you can make the request for how long? Let's say you live to be 100. Okay. And for some reason you're lucky enough to still be working because they figure out ways of making us live longer, like in the future. So, at least for the next like 75, 80 years, the college has to maintain your grades. Where are they maintaining it? Maintaining it in these tables, the student table, the registration table, which is in a database. Okay. There is no printout somewhere. Okay. You can't take your diploma off your wall and then present it to somebody because anybody can go into Staples and go to the Xerox machine and make a color copy and create a, you know, a diploma in Photoshop. Okay. So, the actual diploma is not really evidence. So, we're talking about the student table contains hundreds of thousands of rows and millions of rows. So, when we're talking about doing a backup of our database, this is an example of a table that we're backing up. So, NANW understands an example of a table that's being backed up. For example, the student table, 17,000 rows for current students, and, you know, the millions and millions of rows for the previous students, college is like 85 years old. So, you have to go back like 85 years. Okay. So, now that you understand the type of table that's being backed up, what are some ways that we can make the backup go faster? Is it normalization? How does normalization impact the rows that are being backed up? It splits them. So, it's easier to transfer data. Normalization is just a method of organizing data in tables. What, you know, which columns will you place into what tables? Remember, we're backing up the rows in the table, the actual data. What are some columns that you're saving in the student table? Give me an example. Name, address, ID. Okay. Let's do some more. Names. Naeem, Samantha, Samal, Saifah, Sunny, Thomas, Ying, Alvin, Aaron. Give me some names that are in the student, some columns that are in the student table. Major, data first. What else? Contact information. Student ID. Oh, sorry. Yeah. Phone number. Guardrails. Okay. Guardian. Okay. You have, like, SAT scores, high school you graduated from, you know, previous colleges that you went to, an example. So, these are examples of some columns. How often does this information change for you? Name. How often do you change your name? Very often. Not very often. There's certain scenarios you would change your name. Okay. How often do you change your date of birth? Never. Well, unless you know anything about time travel, you're not changing your date of birth. Okay. I do agree your address can change, you know, probably like once, twice, three times, probably not that much. Okay. Phone numbers can change. You know, your guardian name might change like once or twice. How about your SAT scores? How often is that going to change? Never. How about your high school that you went to in the past? How often is that going to change? Never. Never. So, when you do a backup each day, you're backing up every single row in the student table. And for students that graduated five years ago, ten years ago, fifteen years ago, they still need to ask for transcripts because, you know, they need it as part of employment. How often is, you know, to the information about the student who graduated ten years ago, how often is that going to change? Like, it's not going to change. There's all the information, you know, the college is not keeping track of all the names, you know, that you exist today. It's what it existed in the past. So, all the rows in tables of graduated students is not changing. It's fixed. And all the classes that the students took when they graduated, you know, five, ten, fifteen, twenty years ago, how often are those values changing? They never change. Change. Never. Somebody took a class ten years ago and they took enough classes to graduate, like, that's it. Classes aren't changing because I finished the classes twenty years ago. But the college still has to maintain that record. So, anybody who graduated, whatever rows in the registration table they have, they're never going to change. So, based on that, what are we backing up each night? That's taking us 24 hours to back up and it's 20 terabytes. Data that can change. So, we're backing up what type of data? Oh, so we are not backing up all the data. We are backing up the new data. Well, right now, we are backing up all the data. We're backing up everything. We're backing up data, you know, for you, whether or not, you know, there was any changes to any of your records. And we're also backing up every row for every student who graduated the millions of rows in the past, whether or not they changed or not. That's what these 20 terabytes are all about. So, what's the way of making the backup go faster? Only backing up critical data that is changing. So, what's critical? What's critical to you may not be critical to me. Right. So, data that changes consistently or on a regular basis. Okay. So, how about we backed up only data that has changed? So, for example, give me a scenario where your data can change. It's a legitimate change of some of these columns. What's the scenario? I moved locations and now I have a different address. Okay. So, you have a change of address. Moved. Give me another scenario. I got a new phone and changed my phone number. Okay. Give me another scenario. Somebody enrolls into the college. So, it'd be a new set of data, a new student, new name, new address. So, you have a new student, a new record has been inserted into the student table. So, it existed today. It didn't exist yesterday. So, these are three scenarios. Okay. So, of the 17,000 students that exist in Queens College, on any given day, how many students are rushing to the registrar to change their address? Five, 10, 15, 20. Let's say I'll give you 20. Okay. 20 students go to the registrar to change their address. How many students are getting a new phone number? Let's say it's like 50 students on any given day. I'm being very generous here. How many new students are applying for admission? Let's say 100 students are applying for admission. Okay. On any given day. So, we started out with 17,000 students that are currently enrolled. How many records have changed today? 170. 170 records have changed. Based upon this current scenario, how many records are we backing up each night? 17,000. Plus everybody who graduated since the beginning of time. So, backing up millions and millions of rows. But we just did like a rough calculation. Like 170 rows, 170 students had changes. So, while we're backing up millions of rows, if only 170 of those have changed. So, why don't we just back up? Rather than perform a full backup, let's just back up those rows that have changed since the last backup. What's a good name for that? To back up only those rows that have changed since the last backup. So, incremental backup. So, the incremental backup is only rows changed since the last backup. The full backup is backup all rows in all tables. Okay. So, if we just perform an incremental backup, that's going to be faster. And now this backup will complete in time. It's clearly backing up 170 records. You know, they'll take like, I don't know, like a few minutes at the backup. Okay. What do you think about this possible solution to increase the speed of the backup? To perform incremental backups each night? What are your thoughts? Muhammad, Matthew, Kelly, Kate, Jude, what do you think? I think it works well. Because if the data is backed up prior, then it makes no sense for us to backup data that hasn't changed. We already have it in the database. But if the database has data that has changed, then that's when we should update it. So, I think that it makes the amount of updates a lot less. Okay. So, let's evaluate this and what you just said. So, I asked you what you thought about the incremental backup. So, evaluate it in terms of speed. Is it faster, slower, or the same? I say that it's backing up all. So, incremental backup is faster. What's the cost of implementing an incremental backup? Less than what we had original. So, let's assume that, you know, I still need to use a tape drive, but, you know, it's going to run faster. So, let's say the cost would be a little bit less, you know, a little less. What's the reliability? Meaning that if I have to recover from my data, let's say that this whole server crashes, whole server, like, has some type of incident, whole server, like, has some type of incident, all the data gets lost. Okay. Mechanical problems happen. It happens. Stuff happens. I need to recover. What's the method of recovery? And how am I going to evaluate the method of recovery? How much data loss is acceptable? I mean, you have to have the criteria, right? In order to build a solution, you have to determine, well, how much loss is acceptable. Is it okay if I lose your transcript and somebody else's transcript and my transcript's okay? So, how much loss of data is acceptable? There's only one answer. Your manager asks you this question. You will respond in five seconds with what? Yeah, essentially none. Like, don't say eventually. You want to say none. So, no data loss. Oh, I said essentially. Sorry. Like, you don't want to. Right. So, like, no. So, no data loss is acceptable. You can't say, well, it's okay if a thousand, you know, records get lost. That just means, like, a thousand students don't exist anymore. They were wiped out of existence. They never attended the school. Whoops. It doesn't work that way. So, no data. Right. So, no data loss is always the right answer. So, based upon this incremental, you know, recovery, incremental, like, backup each night, only those records that have changed since the last backup, what's the method of recovery? The system fails, like, here. Okay. The backup finished. So, I recover from Monday's backup, Monday's backup, right here. What's in Monday's backup? How many records? How many records? How many records? Remember, I just did an incremental backup. How many records were in this Monday's backup? It's 170. 170. Okay. The whole system failed. It lost all my data. I want to recover from Monday's backup. After I recover, how many records are going to be there? 170. How about the other, like, you know, 10 million records? How do I recover from that? So, this is a great solution. We made it go faster. We spent less money, but reliability is not so good, because I didn't recover all my data when I had a failure. I recovered 170, rather than, you know, the many millions of rows. Solve that problem. I'm doing incremental backups because it's faster. But it doesn't allow me to restore, because all the backups aren't, all the rows aren't being backed up. So, what do you think? So, we can recover most data, right? I could, well, based upon what we just did, I can recover 170. So, the person who changed their address, I'm going to recover that. But you, who didn't do any type of change to your record, your data was lost. Too bad. So, look at the whole board here. I've got 70 records. I'm going to recover all my data. Look at the whole board here. I've got seven days during the week. Saturday and Sunday aren't being used. I mean, Saturday is being used by half. Okay. So, what's your recommendation? Backup during the weekend. Okay. So, what kind of backup will I do on the weekend? I have two types of backups. I have a full backup and I have an incremental backup. So, right now, I'm doing this incremental backup so I can bloat. Incremental backup on Monday, incremental backup on Tuesday, Wednesday, Thursday, Friday. So, you want to do a full backup. When do you want to do a full backup? During the weekend, because that's when the database isn't being active. When? Any day? Maybe Friday night. Okay. Friday night, I have from 7 p.m. until 12 p.m. right here. Remember, I need 24 hours to do a full backup. Just do it Sunday, since nothing's happening. Okay. So, how about Sunday? So, do a full backup, which means every row and every table is going to be backed up on the full backup. Which means every row and every table is going to be backed up on the full backup. Okay. Now that I did that, I have a failure here. Failure. Failure. Tuesday, 7 a.m. The Monday incremental backup completed. So, Monday, 10, 24, completed. I have a failure. I have a failure. Failure at Tuesday, 10, 25, at 7 a.m. What's the method of recovery so there's no data loss? You can't recover all of it because it's a full backup. Okay. So, step one, remember, I have all these backups. These backups are in tape. All these tapes are in front of me. In what order do I do the recovery? Step one is to do what? Restore the data from the full backup. So, restore data from 10, full backup on 10, 23. After the full backup from 10, 23 is done, my database has been restored to what consistent state? The data exists as of when? The data that's in this 10, 23 backup is data from when? The previous week? Right. The previous day, before Saturday, was Sunday. It was before Sunday was Saturday. So, it's like 10, 22. So, my restore to the last consistent state that the database is existing on 10, 22. Good. So, by doing step one, my database is restored as of, you know, October 22nd. But remember, the failure occurred on Tuesday, 10, 22. October 22nd. But remember, the failure occurred on Tuesday at 7 a.m. Keep going. What's step two? Restore from what? Restore the incremental backup from Monday, 10, 24. So, the incremental backup from 10, 24. So, after this incremental backup from 10, 24 has been restored, remember, the pending, the rows that were in 10, 24 backup, to the backup from 10, 22. So, my database will be in what consistent state? After the 10, 24 has been restored, as of what time? Can you repeat that again? After I do step two, and I restore the database from my incremental backup from October 22nd, I restore the database from October 22nd. Which is like right here. My database is good as of when? As of like 6 p.m. On what date? On the 24th. Correct. Right. So, I'm good as of 10, 24, like 6 p.m. So, this is good. So, now, after I do the step one and step two, how much data loss do I have? Well, did any data change from here to here? No. No. No. So, that means, remember, the orange is only when I have data change. So, I have no data loss. So, my, you know, my failure point was after the backup completed, I did the full restore of step one. That brought me to my data as it existed as a 10, 22. Then I did all the incremental changes that were performed on, you know, October 24th, and I appended to. Okay. Let's say that I have a failure. So, this is failure number failure one. Let's do another scenario. Failure two. Okay. So, let's do let's do what's the recovery scenario for failure two? And I'm evaluating this. I want there to be no data loss. So, you would start from the full backup on 10, 23? So, restore a full backup from 10, 23. So, this restores my database to as it existed, you know, the, you know, the, you know, state is 10, 22. Good. Keep going. So, now you are rolling forward. But this is good. You're rolling forward. Keep going. Step two. You recover from backup one from Monday, the 24th? The restore incremental. Yeah, incremental. Sorry. Backup from 10, 24. So, this brings me to how the database existed as of 10, 24 at like 6 p.m. That's when I turned off my database. Step three is to do what? Remember, you're at this point right here. So, it says like backup one, but would you do like, you would do like a backup two for like Tuesday, wouldn't you? Correct. So, there'll be, this is like here from before, right? Yeah. So, you would do like an incremental, you would do an incremental backup from the 25th, which brings you to a consistent state from 10, 25 at 6 p.m. So, restore incremental backup from 10, 25. So, this restores me to as my data existed from 10, 25 at, you know, 6 p.m. Keep rolling forward. You're almost there. Step four is Thursday, so. Yeah. Then, you would restore an incremental backup from Wednesday, the 26th, which brings you to Wednesday, the 26th at 6 p.m., a consistent state at that time. Okay. Since my database was turned off at 6 p.m. and my database has been restored up until 6 p.m., no changes have been made, you know, since here and the failure occurred here. So, I have no data loss, right? That's good. Okay. I'm going to keep doing this until I break it. Okay. So, let's break it. Give me a scenario that would cause me to have data loss. Where should I put failure three? During the full backup phase when we backup data. Okay. It could be here in the full backup. Let's make it even more exciting. Let's make the backup occur, like, in the middle of the day. Failure three. The rules are going to fail. Let's make it really good. Okay. Failure three occurred at 1 p.m. Scenario three. Failure at 10, 27, 1 p.m. What's the method of recovery? And where there's no data loss? It's not possible to have no data loss because data will be â€“ data from Thursday will be lost since there's no backup performed on Thursday's data. So, let me see if I understand this correctly. I hire you as a database administrator. I'm paying you to do the backup. I'm paying you to do the backup. I'm paying you to do the backup. So, let me see if I understand this correctly. I hire you as a database administrator. I'm paying you a lot of money. And then you come into my office and say, sorry, data is lost. What's my reaction going to be to you? Probably fired. Well, before I do that, I'll say, go back to your desk and just figure it out. Because your job, your sole purpose in your job is to ensure the integrity of the database, ensure that it's normalized, there's proper security, and there's no data loss. Like, that's your job description. That's it. So, you have to plan in advance this scenario. So, by doing scenario two, this will bring you right up until like 6 p.m. on the 10th, 26th. How do I get to, how do I recover this little piece like right here? From 8 a.m. when the database goes on until 12.59 p.m. until the database fails at 1 p.m. How do I recover the green? Remember, the backup never happened. So, I'm really asking you, how do I recover data that's in green, even though there was no backup performed with no data loss? Can you use, like, a differential backup where it, like, captures all the data, all the changes made since the full backup? So, it will include data that was changed before failure three? Well, the, if I understand what you said correctly, these items in green, this was supposed to have been backed up when? If there was no failure, the item, the rows that have changed in green would have been backed up when? Like, down here. Yeah, in the incremental backup, backup number four. So, you're saying, so how do you do this backup? How do you recover this if we haven't reached a backup yet? Say what you said again. Use a different backup method called a differential backup where you would record all the changes made since the last full backup. Hold on, you just gave me your name here. So, differential, D-I-F-F-E-R. Is that how you're going to spell it? Differential backup? I think that's correct. Okay, good. Like, you just gave birth to something here, so I'm going to make sure you gave it a proper name here. Okay, so what is a differential backup? What do you want it to do? It will capture all the changes made to the data since the most recent full backup. Capture all changes made to the database since when? Since the most recent full backup was made. Was made? Getting here? So, since the first full backup, so that would be, but I already have the incremental backups that kept track of the changes on Monday, the changes on Tuesday, and the changes on Wednesday. So, capture all changes made to the database. Well, that's Monday, Tuesday, Wednesday. Backup one, two, and three. How do I get to that last step? Of course, you have to finish the line and capture the three. Capture all changes made to the database. What? You can do since the last incremental backup. Right. So, what's considered a change to a database? What SQL operations result in a change to data? Update, insert, delete. So, you know in advance, anytime these operations occur, it will result in a change of data, assuming you did a commit. So, how do I get a backup of those rows that have changed in green? You would backup after backup three finishes. After you finish backup three, then you'd have to perform another backup. But remember, my database is, I can't do a backup if my database is active from 8 a.m. until, like, 6 p.m. So, I can't, like, stop my database and do a backup. Give me an example of an insert, update, or delete that could happen on the student table between 8 a.m. and 12 p.m. Give me an example. Someone drops a class. Okay. So, give me the SQL for that. You know, like a rough SQL. Select all from student. Your scenario was, you know, drop a class. So, how does select star from student drop a class? Schedule, in the schedule table. But how does select star from student, or select star from registration, drop a class? We're connecting the primary keys. Then we could, like, return, like, have a grade dot class with a W. Okay. So, how do I put a W? You drop a class. That's a W, right? So, how do I assign a W to the students? Use update operation. Okay. So, which table? W is being assigned to the grade, right? That's the grade. Grade's a W. Yeah. How about update registration? Yeah. You know, set grade is equal to W. Got to be careful here. Where, what? Where student ID is equal to 1111. Okay. If I were to press enter now, that would drop every class you ever took, assign every class you ever took a W. And what? The class code. Class code is equal to, which is the class that you want to drop. And this is almost there. So, you're dropping you. This is this class code for this student. Why do I need one more and? Is it possible this class code in your many years at Queens College, could you have another class code that happens to be the same? Is that possible? Like this course, you know, let's say is 34343. Next semester, it's not going to be the same number. It could be a different number. It will be a different number. So, there's no guarantee that you won't have more than, that you will only have one class code that's unique. You could have duplicate class codes. I agree it's not likely, but it's possible. How can I ensure the right How can I ensure the right class code for the right person? And what? The semester number. Semester equals to fall 2023. Just to be sure. Okay. Okay. So, this is one change that you're making. Okay. So, this, so this is something that you want to recover, right? What's another change besides dropping in class? What's another scenario? We're causing a change to the database. One of them is dropping in class. What's another change? I'm sorry, what? I was going to say we should enroll in a new student. So, insert the data into the table. I'm sorry. And you're garbled there. You're unenrolling the student? Is that what you said? No, enrolling students. Oh, getting a new student. Yeah. Enrolling students. So, a new student enrolls. No student is admitted to the college. Okay. What's the SQL for that? Student fills out a form. They have all the letters of recommendation. They have all the SAT scores. It goes to the admissions department. It goes before a committee. Thumbs up. You've been, you know, approved. A letter comes from the admissions department. So, what table do you get added to? Is it drop classes? No, the scenario is new students admitted to the college. So, what table are you added to? What happened to students? Registration. Before you register, anybody off the street can't just register. In order to register, as your student ID is a foreign key, foreign key back to what? Who's allowed to register? Only what? Only students. Correct. You have to be a row in the student table, right? So, you have to add a new row to the student table. And to add to job four. Insert. So, inserts into students, values. There you go. That's adding a student. You know, I'll give you a commit also. Okay. So, now that we have this, remember, we'll stay focused on what we're trying to achieve here. How do I recover the rows that have changed during the time period in green? Because my failure occurs at 1 p.m. Is this an example of a change? This is another example of a change. Okay. Well, if you knew, you knew that this occurred. And you knew that this occurred also. You knew that these two changes happens. This update was done and this insert was done. If you had to do all this manually, how would you recover the data in green? Maybe delete the new data. Or like stop it. Would you back up the two updates after you did the updates? What does that mean, back up the two updates? Like, record them separately. Well, would it be accurate if I think what you said is I just re-execute this and I re-execute this, right? Yeah. So, if I were to re-execute this, meaning that the failure occurred, this is an example of what could have occurred during the time period in green. This is an example of what could have occurred. So, a simple method of recovery is just re-execute this and re-execute this. Re-execute whatever insert, update, and delete commands were done during in green. So, how do I keep track of all the changes that were made to the database, which will allow me to recover later? A log file. Like a log file. So, what's in your log file? The backups. Well, give it to me in terms of columns. Like, what are you trying to track in your log file? A log file is like an audit trail in accounting. And I'm going to use this in order to, you know, keep track of what was changed in my database. So, what do you want to record? Time spent. Okay. So, the date of the transaction. So, let's say this was done. What date is this? This is 10-27. So, 10-27-2-3 at 10 a.m. So, what else besides the date of transaction? What was changed? Okay. So, what was changed? So, this will be the table. So, I'm looking at this one right here. What table has been changed here? Register. Register. And what's the date of transaction? Register. Register. And what's, what was the SQL that was done? So, update registration set grade is equal to W where? W where? Okay. So, this was the SQL. How about this next one? So, this was done on 10-27-2-3 at 10-15 a.m. What table did this occur on? Student. And the insert command was that. So, I had this little transaction table and a transaction table, but I have this log file as you called it. Okay. So, this is one transaction right here. I'm just going to put it in like a different color. So, this one transaction is here. And I have another transaction is there. So, one transaction, another transaction. So, how can I use this log file to assist in the recovery for the rows that have changed in green? What's my method of recovery? Re-executing them, whatever is in the log. Okay. So, the scenario would be is do everything that's here. So, this brings me to 10-26 at 6 p.m. And then step five is to re-execute the rows in the transaction table. So, I re-execute this, re-execute this. I could execute rows in log file. Now, very carefully, when do I stop? I keep rolling forward, keep re-executing these rows until when? Until it says commit, maybe? Or when did the failure occur? Oh, 1 p.m. 1 p.m. So, if the failure occurred at 1 p.m., I could probably go up to 12-59 in like 50 seconds. Because I can't back up, I can't restore anymore if the database is not there, there is no recovery. If I can keep rolling forward, there's no scenario. Give me another scenario, but now we're talking about a hardware problem. The whole server had a fire. The hard drive crashed. That was a hardware scenario. Give me a scenario that's not a hardware scenario. I'm sorry, I had bad connection for a little bit. What was the question? So, before we're talking about hardware scenarios, where the hard drive crashes, I have a hurricane, I have a fire, and then my mechanical equipment gets failed. It's failed. Most of the problems that happen in databases, not due to hardware failure, but are caused by what? Human error. Human error. It's your fault. So, there's two types of human problems that cause database problems. What are those two types of problems caused by humans? Like an input error. So, accidentally pressing the wrong key or inputting the wrong information. Okay, so one human way of causing problems is an accident. What's the other scenario? The person doesn't know. It's like deliberate. I'm going to like deliberately delete data. Oh, we're going to deliberately delete data. Okay. So, I have this scenario. Can I pick on you, Samantha, for something? Yeah, sure. Sure. Okay. So, you've been working as a database administrator for many years. You did top-notch work, no problem. The company has financial problems. We're losing customers. Not your fault. We're just losing business. I call you into human resources, calls you into their office Friday afternoon. For those people that have employment experience, what does that usually mean? You're getting fired. Right. You're being laid off. You are very upset, Samantha. I'm just picking on you. Okay. Don't get, I'll take it personally. Okay. You're very upset. What might you do when you go back to your desk? Not that you would ever do this, but if you were dreaming and you did this, what might you do? I might want to. By the way, you worked there for many, many years. You're really, really, really upset. Right. Also, you can't hang around the office for hours and hours and hours. This has happened. You have a few minutes at your desk. Not that you would ever do this, but what would be a scenario if you have a few minutes at your desk, if you were to dream about doing something? I would maybe hypothetically delete data from their database. Give me a SQL command that can really mess up the database, but you don't want to be accused of doing any of this because you can't crash the system because it is saying, well, you crashed the system. Causing a problem with the data that will need to be recovered. Give me a command. Delete the student, delete the student table. Well, if you delete the entire student table, that means that anybody who attempts to register will say, sorry, you can't register, you're not a student. Everybody will start calling up the college and saying, how come I can't register? Make it a little bit more subtle. Okay. Delete the most recent 10 rows of data. Well, how about this? You also went to the college. Oh. What's the one thing everybody wants to do? About if they could go back in time, what would they do? If I can go back in time? Change your grades. Oh, okay. So, update what? Update grade from... That grade is equal to? A. Where? Where student ID is equal to, like, 111. And 111 is whose student ID? Mine. Done. So, this means what? Every class you ever took, well, let's add in a commit. Every class you ever took, now it's a grade of A. Done. So, this will probably take you, like, what, 30 seconds? Okay. So, who would know this? Only me. Right. Nobody's going to really complain about it because probably no one is looking at it. But this is a data problem. The database is now corrupted. So, what's the method of recovery? Remember, so it's like, you know, 25 rows were changed. But everybody else's rows are good. And you did all this, let's say, right around... So, failure five. So, what's the method of recovery from this scenario? To make it even more complicated, when might this be discovered? What's happened? Well, this might be discovered, like, one week from now, two weeks from now, or three weeks from now. So, now we have another type of scenario where I had to recover something, like, three weeks from now. So, since this was an update, would this be in the log file? True or false? True. Right. So, one possible scenario, we could, you know, discuss it more, is you could restore the full backup, apply every incremental backup, and then recover the rows in the log file, like, up until the point that you have this update. You don't want to re-execute this. So, we have to talk about that scenario. The point is, is that we have three very powerful tools of doing backup and recovery. Full backup, which gives us all records in the database, the incremental backup, which gives us the speed, and then we... And then we... You invented the log file, which records every change, insert, update, and delete. Then we could roll forward, re-execute these SQL operations in the log file, and keep rolling forward until there's no data loss. Okay. So, next time, there's a couple more scenarios that we have to do, is what happens if we lose the full backup, like I misplaced it, I don't know where it is, or the incremental backup on one day fails. How do we still recover anyway? Okay. All right. So, I'll pause here, and if anybody has any questions about Project 2, I'll stick around if people have any questions. Let me stop the recording. Thank you. Thank you, Samantha. Sorry to fire you, but... Glad to help. Right. You were rehired.
