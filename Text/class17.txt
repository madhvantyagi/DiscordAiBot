Okay, can everybody see my Word document, Backup and Recovery? Yep. Great. Yep. Okay. Good evening. I hope everybody is doing well today. The objective for today's class is to discuss Backup and Recovery. We're going to continue doing SQL, just, you know, taking a little pause, you know, for a little bit. And so Backup and Recovery is the concept that anything you say to the database today needs to be there tomorrow. And we need to create policies and procedures to ensure, no matter what happens to our data, whether it's a hardware problem, software problem, somebody accidentally, you know, deletes or deliberately deletes data, we have some, you know, hurricane or tornado, something that impacts our data, no data is lost. So we need to come up with a process to ensure that no data is lost. We need to evaluate the different backup systems. And also, it's not too useful to have a backup system if we can't recover, to restore all the data in the event of a data loss. Okay. We're also going to, remind me towards the end, we'll discuss Project 2 and what's involved with Project 2. Okay. So let's get started. So our data is saved to our database server. And specifically, we have a storage device. We're going to use a magnetic storage device. Magnetic storage device has a high capacity. So the VNT is a magnetic storage device. It has a high capacity. So storage devices are often measured in terabytes. So let's say that we have a 5-terabyte storage device. It also has, I could retrieve, I could read, write, save, and read data from my storage device very quickly. What's the speed of saving and reading data from the magnetic storage device? How do I measure it, the speed? How quickly can I retrieve, let's say, one byte of data, and how quickly can I save one byte of data? This is like a CS12 question. I can go ask my CS12 students. They can help out here. So how quickly can I retrieve and save data? Is it by the disk spinning? Right. The magnetic storage device spins. So how quickly can I read data? You have a storage device on your home computer. How quickly can you, when you open up a Word file and you're reading data, reading bytes, or you're saying file save and you save, how quickly is the data saved from memory to your storage device or read? Is it in megabytes per second? Okay. So megabytes per second is the transfer rate, but you could also measure it in terms of how quickly you could retrieve data. So a typical unit of speed will be milliseconds, meaning a thousandth of a second. So a typical read-write of a magnetic storage device is about, let's say, 10 to 12 milliseconds. Okay. So this is... We're going to be discussing other types of storage devices. Also, the cost is fairly low. Okay. Let's say it's a couple hundred dollars. Okay. So approximately $500. So we evaluate the different storage devices based on the capacity, speed, and cost. Okay. Typically, you can't get everything aligned. Typically, if something is high capacity or is very fast, typically the cost goes up. Krishna, you had a question? So just to clarify, that read and write is for one byte, right, just as an example? Well, we'll discuss it in more detail. We're not actually reading, like, one byte at a time. We're actually reading a block of data. Oh, okay. So a block of data, and this is similar to your operating system class. So a block of data would typically be, let's say, like, 4K or 8K or 16K. It's more efficient rather than reading one byte at a time to reading 4,000 bytes at a time, like a chunk of data, and then you save a chunk of data. But the smallest unit would be a byte, but typically rewrites to create efficiencies for the operating system to start on a block level. So if you were to look at, you know, your computer, and when you format, you know, a computer, you know, to format to destroy, if it asks you, like, how do you want to format it, what's the block size? There are advantages to a small block size, advantages to a large block size, which we'll be getting into. Okay. Good question. Okay. So let's say that we have a database server. So a database server that we're talking like hardware. So my hardware or the server we're talking about, so we have a processor. So a server has a fast processor because all the connections go to the fast processor. So memory, so any time I read data from my storage device, it gets brought into memory. So I need to have a, you know, a large amount of memory, so high capacity memory. And I have a storage device, just like we discussed up here. So I have a lot of storage. Let's say it's like five terabytes. Okay. So this is the requirements of my server. Okay. So let's just start out. Let's assume that we have a problem with my server. I have data loss. Specifically, on my server, I have a database. In my database, I have a table. So let's say I have a table called, you know, customer, customer ID, number. Okay. So this is my customer table. And my customer table, I could have millions and millions of rows of data. So my table is saved to my database. Database is saved to my server. Let's say something happens. Data is lost on the system. So there will be a method of me to minimize my data loss. And I'm giving you a budget. I'm giving you money to come up with a solution. And we're going to evaluate the solution. We're going to evaluate these various solutions based on what's the – how much data loss do we have? And whether or not the – what's the cost of implementing this solution. Okay. So my problem is I have a database. My database is saved to my storage device. Something happens. I have a data loss. So give me a way of me storing the data that will minimize having any type of data loss. I'm giving you money. What do you think? Back up to another storage device. Okay. So back up to another storage device. So I should be talking about we have, like, this server right here. And then we just have a, like, another server. Yeah. How about like this? Maybe this. Okay. So I have two storage devices. So I have my table, my customer table, saved to this database. And then I have a metadatabase server. So I assume that your plan is if anything happens to this database server on the left, the database server on the right will be promoted and become my primary database server. Okay. So why don't we just call this – So this would be database one over here. And this would be database two. Database one stops working or I have data loss. It doesn't matter how. So this will be demoted and my database two will become primary. Okay. So what's the cost of implementing this solution? We're evaluating this solution. What's the cost of implementing this? You'd have to pay for a whole other server. Right. So the cost would be double. Okay. Whatever the cost of my database one, of course, the database two will be, you know, the same price. So the cost is double. Okay. How do I ensure that anything that's on database one is also on database two? Because if database one stops for whatever reason, database server two has to be promoted and become my active system. And I want to have no data loss. So how do I ensure both database one and database two are the same? You'd have to regularly check to see, like manually check. Well, I'm not asking check. I assumed it being, you know, that, you know, are they the same? I want to come up with a price list to ensure that anything on database one is also on database two. By checking the time it was last backed up? So let's say I back it up each night at 8 p.m. So once I know the time it's backed up each night at 8 p.m., how does that help me? Mike, if it wasn't backed up by 8 p.m., then it wasn't safe. It's not the same. So the second database has a different data than the first one. Okay. So I need to have a way. So what happens, so what's the problem with having a database being backed up each night at 8 p.m.? How can I have data loss if that happens? Can I have multiple read and writes, which causes data loss, data corruption? No. So if a database is backed up at 8 p.m. Something had happened before 8? Right. So it backs up at 8 p.m., and then I come in in the morning at 9 o'clock, and then the system starts working at 10 o'clock, then, you know, there's been no backup from, you know, 8 p.m. until, you know, 10 a.m. So, like, that's not good. So how do I ensure these two databases? Because you said that the solution was the database server goes down. Well, I have a copy. Everything's on database, too. So the question is, how do I ensure that both of these are the same? How can I make sure that they're both the same? Wouldn't you just do them more than once a day, the backups? Okay. So what time during the day am I going to back it up? When am I going to back up database one? Okay. Every time there's an update to database one, you update database two. Okay. So you're saying every time I – so under – one, I'm going to keep the backups? Yes. So every time I update database one, I'm going to update database two. Okay. So you're saying every time I – so every time there's an update to database one, you're saying every time I – so under what SQL operations will change data on database one? So any altercation of data? So it wouldn't be like – well, it wouldn't be selects. So like update or insert? Anytime data is committed. Well, one more. Change data. There's only three operations that change data. Delete. Right. Delete. Okay. So anytime there's an insert, update, delete. So you said that anytime data is changed. So I'm just being very clear as to what change means. Anytime data is changed, you're saying then write it. You're saying, like, write the data. Okay. So let's evaluate this solution. Okay. So let's say that I perform an insert operation. So the insert operation means that in step number one – step number one, I – let's say save the record that I just inserted, you know, to database one. Then how do I get the data from database one to database two? How do I get this part right here? Where am I copying from? Where am I copying to? So where does the current data reside that I just saved? In database one. Are you going to copy to database two? So copy the record from database one and save to – and then save, perform an insert into DB2. Okay. So then, after that's done, database two in the customer table has the same records as database one. So let's evaluate this. So it's evaluated from – everything is always speed, cost, and liability. Anytime somebody asks you a computer question, what do you think about something, you know, we evaluate it based on speed. What's the speed of implementing this? So it's saving the record to database one. So this will take about, like, you know, 10 to 12 milliseconds, because that's how long it takes to do a save on the database one. Now, then we have to copy the record from database one and move it to database two. So that means the processor on database one, not only is the processor on database one doing the save, but now it has to do another read. It has to copy the record off. So step number two, we have to do a read from database one in order to get this new record. So the read takes 10 to 12, like, milliseconds, plus it takes processor time in order to do all this. And then DB1 needs to, you know, send the record over a network to DB2. And finally, DB2 will perform a save. So about, like, you know, 10 to 12 milliseconds. So what do you think about this? Is what we just did, is this going to be – how is this going to impact database one, in order for database one to do all this copying and synchronizing database two? How is it impacting database one now? Won't we be unable to work with database one while it's doing all this? Why? Because we're transferring data. Well, you can transfer this, you know, in the background. So it seems to me that database one, not only database one doing a save and doing work to save the original record, the insert, now database one's processor is going to have to do a read of what it just saved. So every time you do a save, database one has to do another read in order to, you know, figure out what was just saved. So it's doing double the work. Before, database one was simply just saving work. Now it's going to have to save work, retrieve the record, and then database one is going to have to send it over again. So database one seems very busy now. So by synchronizing database two from database one, yes, database two now has the record, but database one just got slower because it's doing twice as much activity. So based on this analysis of, like, speed, cost, and reliability, so the speed just went down for database one. Database one is doing double the activity. So how can I ensure that database two is synchronized without slowing down database one? Is it by doing it at a certain time? So give me an example. Like doing the backup at 8 p.m.? Okay, so you're saying that database one will only synchronize database two at 8 p.m. So all the changes, insert, updates, and deletes that are done throughout the day are going to be queued up. And then finally at 8 p.m., all the queued-up changes at 8 p.m. from the whole day are going to be copied over database two. Yeah. Okay, so, okay, I do agree. That will certainly not impact database one performance during the day. But what's the ‑‑ but, like, break that system. And anytime I ask you to break something, meaning cause data loss, every computer solution has an advantage. Every computer solution has a disadvantage. What's the disadvantage of queuing up all the changes and writing them at 8 p.m.? Speed, cost, reliability. Keep your answers limited to that. Reliability? Right, so what's the problem? Break it. If it goes up to 24 hours worth of data, back up at 8 p.m. every day. Like, let's say this server, one server goes down at 8.01 p.m., then everything after that might not get backed up to DB2? Okay, so if we queue up all the operations and then do the backup at 8 p.m., and then if the system fails at 8.01 p.m. and we didn't finish copying, then we would have, you know, lost all of our changes. Okay, fair enough. It puts pressure on the CPU, which may cause the other components to, like, fail. What kind of pressure on the CPU? Like, since it's doing a lot of read and write, it, like, takes a lot of memory, CPU memory. Okay, well, CPU is a computer chip. It's a computer chip that's not going to wear around if it's working a lot, you know. So what happens if we do a backup at 8 p.m. and we save all the commands, but the system fails at 7 p.m.? That means the SQL operations, the changes would never have been copied. So I need a solution that's able to copy data from Database 1 to Database 2 without impacting the performance of Database 1 by doing all these extra, you know, reads and writes. And also, you know, if the system, you know, Database 1 fails, we're still in sync. If I just do it once a day, what happens if the system fails, like, 7 p.m.? I'm going to lose everything. So how can I synchronize the two servers? Can we use the Internet? We use the Internet, okay. How does that work? Like, it's connected to the cloud. So as, like, updates happen, I guess it automatically updates Database 2. But, like, it happens on a separate, like, CPU or on a separate server or something. Okay, so this is the cloud. This is the Internet. So now I go through here, and I go through down here instead. So I'm still following the same process as I'm doing here. Step one is save the record. Step two is to have to do the read. You're still putting an extra load on Database 1. Rather than just have a network that goes directly, you know, I just go through the Internet and copy it. The Internet is just a method of transferring data. It's just a network. The Internet has no storage unto itself. So how can I synchronize Database 1 and Database 2 without impacting the speed of Database 1? You could use something from other classes. You know, computer science, creative solutions to complex problems. You've taken hardware classes, storage, telecommunications, networking, operating systems, all different types of classes. So you can utilize all these different technologies that you obviously know about because you're ready to graduate, right? So how would you synchronize the two? Maybe by giving them more memory or like setting aside memory. Okay, so memory on the database server is where data is loaded when you read data from your storage device. So if I have a storage device here and I, you know, read, where does the data go? The data goes into memory. Do you have a Word file on your computer? Word file is 100K. You save file open. All the words, the paragraphs, go into memory. Then you manipulate the paragraphs to do your calculations. So memory, so adding more memory just means that you can take data from your storage device and bring it into the computer's memory so you can manipulate it and do calculations on it. And when you say file save, you just go in the other direction. So adding more memory doesn't synchronize database one and database two. Can you implement like parallel processing to like to split the task so that they can be executed concurrently? Okay, so parallel means what in this context? Like what activity am I performing? Transfer of data from database one to database two. Okay, so I save the data. The record, you know, is being saved. So parallel in this context would mean what? Like, you know, this is, you know, save here and save there. So I'm doing two saves at the same time in parallel. And then I just have a device. And any time I give the save command, saving data from memory to my storage device and saying save, that the operating system will perform the command twice, save it to database one, and at the same time in parallel save to database two. So the advantage to this is I'm not putting any extra, you know, speed on database one because the processor is not going to be, you know, reading and writing any extra. Any save that's done once will just be done a second time on database two. So this device that performs the save twice is known as a disk controller. And if you go to the Dell website and you put together a computer, you know, you can get yourself like a disk controller that saves to multiple disks, you know, simultaneously for this exact operation. Okay, so we get rid of this. Okay, so now we're synchronizing database one, database two by performing the saves in parallel. So good solution. I like this. Okay, so let's keep on building out this solution, okay? We're going to keep on coming up with different scenarios where we keep causing data loss. So give me a way of causing data loss using these two scenarios. It's easy to break things in computers. Break it. Cause data loss. The computer you're working on shuts off. Which one? For database one. Okay, but database one stops for whatever reason. Deliberately, accidentally, a hurricane, tornado, fire. But that means database two has been synchronized. So then database two will just become promoted and become my active server. So then database two will just become promoted and become my active server. So there is no data loss. But database one goes down. So give me a scenario where we break it, where there is data loss. Both database breaks. Okay, fair enough. So let's say that we have. So if database one has a problem and database two also has a problem, well now we can just database three, which will also be in sync. Is anything written to database one? Will also be written database three. By the way, what's the risk of putting, where am I placing database one and database two and database three? Where am I putting them? What's the physical location of these servers? Ideally very far apart. Okay, but if it's far apart, remember I'm working in New York City. And my job as a database administrator is to manage these servers. So I want the servers to be close to me. So I could fix them. I could look at them. I can make sure everything is operating okay. So I want these all located in New York City. You know, like I work at Queens College. I want them all to be at, you know, Kiley Hall, you know, in a server room at Kiley Hall or in the I building. What's the disadvantage of all that? If an actual disaster happens, it's likely to destroy everything at once. Right. So if something happens to New York City, blackouts, power goes off, and I have all my backup servers all in the same location, so give me a better way of distributing my database servers to minimize downtime. What about storing in an online database? Well, before we start doing an online database, I have the database servers physically in front of me. Give me a good physical location where I can place these databases to minimize data loss. Places with less natural disasters, like in the Midwest? Well, in Kansas, the Midwest, they have a lot of tornadoes. So I'm not sure if there's any place in the world that has no disasters. How about we just keep it simple? How about we keep one in New York City? You keep one in California, meaning that we're on different power grids. As the power goes off in New York City, it's unlikely the power's going to be off in California. And you could put this one in, let's say, London. So we're on different continents. So I have my data physically distributed on separate power grids. And if Database 1 goes down, Database 2 could be promoted. If Database 1 and 2 go down, then Database 3 would become active. What's the cost of implementing all this? Having sites in different cities and continents? Right. What's the cost of implementing all this? It's exactly how much more? It's expensive. Three times more? Three times. Right, three times. Whatever cost of implementing Database 1 is the cost of this and this, because the storage, memory, speed, it's all going to be the same. So it's three times as much. Okay. So you know what I'm going to be asking you now. What if Database 1 fails, Database 2 fails, and Database 3 fails? What's the method of recovery without data loss? And I am going to give you a budget, so you can spend money. Maybe not have it in London? Instead, have it in Canada? Okay. So then I have four databases. Is that what you're saying? Like, don't have it in London, because London is very far. Okay. What does it matter how far it is? The speed and the cost. So I have it in Canada. So I'm traveling a little bit less, so I just get a high-speed network. It's not that much longer to transfer to London. So networks are pretty fast. Okay. So Database 1 fails, Database 2 fails, Database 3 fails. What's the method of recovery? Copy that data back. Well, I can't copy it back because all three servers are not functional. I guess, like, based on the nature of the failure, you're going to have to restore all the data from the databases. So, like, reconfigure the software and install back the hardware and all that? Okay. I could certainly go to Dell, buy a new server. I can reinstall the Windows operating system or Unix operating system. I can reinstall MySQL. But my data is sitting on this disk drive that just failed. So I have a database and a server, all brand new, but I have no data on it. So what's the method of recovery if Server 1 fails, Server 2 fails, and Server 3 fails? If your manager says you can spend money, spend money. How about if you just have, you know, four database servers? Okay. If one fails, two fails, three fails, he uses what server? And you know what I'm going to say next. What if all four servers fail? Well, you say buy a fifth server. Then if all five servers fail, you buy a sixth server. Okay. So give me another way. Server 1 fails, Server 2 fails, Server 3 fails, but I'm giving you less money this time. And I still recover with no data loss, but I'm giving you much less money. Is it possible to use data recovery software to recover from the last state from the hardware? So data recovery software. So give me an example of what this software will do. Maybe it will read the physical storage of where the database is stored and then rewrite it into a new hard drive, maybe? Oh, by the way, I forgot to tell you. The reason why these servers are no longer functional is that there was a fire and the physical disk drive is, like, physically burnt. So you have no – you can't perform any type of software recovery on the disk drive because the disk drive is, like, you know, burnt in the corner of the room. So how can I do recovery software if you have the disk drive that's functional, disk drive spins, and I can get to it? If the disk drive is, like, you know, just burnt, you know, there's nothing left to recover from. Give me a method if database 1, 2, and 3 fail, how can I recover with no data loss? Well, where else can I store data that will be less expensive and not require, like, a full, you know, server in order to store it? I don't have to always store data on a – and rebuild the entire server. I can store my data in other locations. What do you think? Is it on a personal computer, maybe AWS, Google Cloud? Okay, so you're saying that database 1 fails, database 2 fails, database 3 fails. So you want to make a contract with, let's say, contract with Microsoft or Amazon, and you want to save the data into the cloud. So companies like Amazon, Microsoft Azure, and Google, they make, you know, billions of dollars a year storing data for organizations. So – but when you simplify it, remember, the cloud is just like a marketing term, you know, that they use for advertising. But when you look at it technically, what is storing data in the cloud? But you push aside all the marketing all around it. Technically, what is storing data in the cloud? They are just servers. It's a server. It's the same server that we have, you know, listed in DB1, DB2, DB3, except you're paying another company, Microsoft, Amazon, and Google, to maintain these servers, to store it within their physical infrastructure, their building, to put an air conditioning system around it, to put security guards, and to ensure that, you know, there's like, you know, fire suppression systems and sprinklers, and you're paying somebody else to maintain the servers on your behalf. And as long as you keep paying them each month to maintain the data, they will continue to store it for you. That's all it is. You're paying somebody else. So, for example, rather than have these servers physically located at Queens College in the I Building, and the City University of New York has to outlay tens of thousands of dollars to spend money on these servers, that you pay, you know, a smaller amount each month for somebody else to maintain it. It's kind of like leasing a car. Why is leasing a car so popular? How much money do you have to spend on the lease on the first month? Then a lot of places just give you a free first month or something like that. Okay, so how much will it cost in the second month? If you buy a new car, the new car is going to be $30,000, $40,000, you know, $30,000, $40,000. So how can I get into a new car by spending a lot less money and then driving away with less money? It's called a lease. How much do you pay for the lease each month? Less than the amount you pay on the loan. The auto loan. Right. An auto loan will help you pay for the lease. You pay $300,000, $400,000 a month, but you get to walk away and start driving a $40,000 car like tomorrow. So you don't have to come up with, you know, $40,000 to pay on day one. So the cloud storage is something similar. Whatever organization you're working with doesn't have to outlay all the money to buy the hardware that you pay another organization for just the amount of data that you need. So what else do you need for cloud storage to work? How do you get the data from your server to the cloud, to Microsoft's or Amazon's cloud? You need a good network connection. Correct. You need a network connection. Okay. So you have to have, obviously, a fast network connection to transfer the data because now the speed of your network is important. So what's the disadvantage of serving data on the cloud? We know the advantage is that it's cheaper, at least initially, because rather than spend $50,000 to build the server, you're just spending, you know, a fractional amount per month, and then you keep paying that for each month that you use it. So over a long period of time, you're spending more on the cloud. In a short period of time, you're spending less. What's the disadvantage of cloud storage? Cloud companies have their own policies. They can also check the data. Okay. So we have speed, cost, reliability, but they add one more, security. So these servers, where are these servers located? They're located in your physical possession, in your building, where you're working. In your building, you're surrounded by people that you know, that have been validated, that have a path to get into the building. The building is locked. The building has cameras. You're responsible for the access to the building. So if you're paying somebody else to store data on the cloud, yes, it's cheaper. And also you're paying for Microsoft and Amazon's expertise in ensuring that that system is operational, but security, how do you know who has access to this data? If you can get to it on the cloud, you know, can somebody else get to it on the cloud? Okay. So now you have to evaluate speed, cost, reliability, and also security. There are some organizations that, like, absolutely no way are they storing data on the cloud, just as a matter of, like, policies. Like some banks, for example, you know, they're not going to store their data on the cloud, you know. Okay. So one method, if database one, database two, database three goes down, a copy of the data can reside in the cloud. Let's say on Amazon's server, and then if you need it, then the data could be then restored and then copied over. Okay. So this will be like, you know, in Amazon's or, you know, Microsoft's or Google's, you know, cloud storage. And Amazon has made, you know, billions of dollars. For example, Netflix. Netflix has, like, no database servers. The whole company, all the videos, they're not stored on any server that Netflix owns. Netflix puts all the data on Amazon's servers. So if Amazon goes down, then Netflix is not going to be operational, you know, that day. Okay. But if Netflix needs more storage, they can just, you know, pay Amazon more, and they can add more storage, you know, very quickly. What's another approach? In addition to storing data on a server, in addition to storing data on the cloud, where else can data be stored at a cheaper rate and also be able to recover without data loss? What are some other storage devices that you can use? External hard drive, maybe. Okay. Backup, but then it also has the same problem of, like, if I didn't back it up in time. Okay, so you're getting an external hard drive. Okay. The problem with that is that those external hard drives that you buy in Best Buy, those are what's known as, like, consumer hard drives. Meaning they cost $70, they cost $80, meaning they're not designed to be operated at a high capacity, you know, to run data, you know, like for a bank. You know, it's designed, you know, for a home, and you back up some birthday, you know, photos and, you know, things like that. They're not guaranteed to last, you know, like years and years and years. But a variation upon that is you can save data to a tape, like tape storage. So tape storage. So tape has been around for decades. It's a, you know, small device that, you know, you fit in your, you know, your pocket. It has high capacity, terabytes of storage. It's very inexpensive. It's about, you know, $100 to $200. And then data can be written to the tape. And then when you need it, you can restore up the tape. So the cost is low. The capacity is high. How about speed? What's the speed of the tape? Probably slow as well. It's very slow. So tapes, it's like, you know, spins, spins, spins, spins, spins. And it could take seconds or minutes in order to locate the data off the tape. Okay. So the tape is high capacity, low cost, but it's very slow. So when do you want to write data from your server to the tape? So when do you want to write the data from the server to the tape? After every update. So data, or change the data. Well, the tape is too slow to write it, to write it like every second. So maybe like we can do like, you know, like, you know, Okay. So why don't we figure out how to do that? Let me just share my screen on something. Maybe every week or month. Let's figure it out here. Okay. So I'm bringing up Excel. Okay. So let's create an Excel spreadsheet. Let's figure it out here. Okay. So I'm bringing up Excel. Okay. So let's create a backup schedule. So I have my database server. And when do I start making a copy of my data from the server to the tape? Okay. And let's say during here is when my database is active. Okay. So database is active. So let's say database is active from, let's say, you know, 7 a.m. until 7 p.m. The reason why that's important is that if my database is active, it can't do a backup when the database is active because data is constantly changing. You need to have the data be in a consistent state. Okay. So help me out here. So let's say that my database is 5. The size of my database is 5 terabytes. And let's say it takes about the time. Let's say it takes about 12 hours to copy whatever is on my database and then copy it to a tape. It's just a physical typing. So when do you want to do your backups? When we log off of work, so starting at 7, and then throughout the night until we hit 12 hours. Okay. So it sounds like I do business from 8 a.m. here until 7 p.m. So here I'm doing my backup. Okay. So this is the backup for Monday. And then I'm continuing the backup for Monday up here. Okay. So I have 7, so 8, 9, 10, 11, 12. So I have like 5 hours over here. And then I have 12 to 7, so I have 7 hours here. I have 12 hours. Got lucky here. So this is my Monday backup. Then my system comes on again over here, and then I want to do the, you know, Tuesday backup. So that's Tuesday backup over here. Okay. So what's the method of recovery? So let's say that I have a failure right about, you know, here. I have a failure here. What's the method of recovery without data loss? What's the method of recovery without data loss? Can you repeat that again? I have a failure. Wednesday, 6 a.m. in red. What's the method of recovery without data loss? Assuming we're using this tape backup solution, so we're not using the three database servers, we're just using, you know, the database server with a tape backup. Database is active during this time. Anything in green, this is what I'm doing in my backup. So I have a failure Wednesday, 6 a.m. What's the method of recovering my data without data loss? Go back to 5 a.m. Okay. So how do I do that? Remember, this is my database right here. I want to recover the database as it exists. So what's my last time that my database was active? If the system failed at Wednesday, 6 a.m., what was my last active state in my database? On Tuesday. At what time? 8 a.m. to 6 p.m. Right, so Tuesday, 6 p.m. I need to restore my database to Tuesday, 6 p.m. But the backup for Tuesday starts when? 7 p.m. Right, so that's 7 p.m. So did the backup for Tuesday complete? Did the backup for Tuesday complete? No. Right, so the backup for Tuesday is here and here, but it failed. So we never did, you know, this part, you know, here. So the Tuesday backup, like, failed. So I can't restore to Tuesday as of 6 p.m. So what's the last backup that I do have? Well, Tuesday database active. Well, the last backup I have is Monday's backup. Monday's backup, you know, completed successfully. You know, it finished, like, Tuesday morning, 7 p.m. So I have Monday's backup. Okay, so what's my data loss if the system fails at Wednesday at 6 a.m.? How much am I able to recover without data loss? You will recover, like, Tuesday's data. The last, like, data that wasn't corrupted that was backed up was on Wednesday at 6 a.m. Or 5 a.m., I can't see. But the backup never finished for Tuesday. Remember, the backup for Tuesday starts on Tuesday night, 7 p.m. and continues until Wednesday morning until 7 a.m. The backup for Tuesday, which runs on Tuesday night and Wednesday morning, never finished. The failure happened at 6 a.m. before the Tuesday backup finished. So this backup right here, like, this was never backed up. So the last backup I have is on Monday. So this is my last backup. So my data loss is, like, Tuesday. So how do I recover Tuesday's data if the backup never finished? So let's do this. Let's, like, pause here, take a look at the reading. Then when we resume on Wednesday, you'll be able to be prepared to have a conversation. Okay, let me talk about the project. Share my screen. Okay, everybody see my Word document, T-Mobile? Yep. Okay, so project 2 is in MySQL. So you're going to be creating a database of your own design to implement the following. So T-Mobile needs to keep track of its customers. Customers also have different devices, you know, like phones and tablets. And T-Mobile also needs to keep track of all types of calls, like telephone calls that are made, because their billing is based on how many calls sent and how many calls received. And they also have texts, you know, like a text message. Texts are sent and texts are received. So T-Mobile has to track all of this. Okay, so you have customers, customers' own devices. Customers also create texts and calls on the devices. And the text and call is sent to another device. Okay, so you need to make a database to keep track of your customers. So, for example, first name, last name, billing address. You want to keep track of all the different devices. For example, an Apple iPhone. Each device has like a unique, you know, like SIM card, which has like a unique ID number, which has like your phone number, you know, for example. Okay, also devices are owned by a customer. Only one customer can own a device. But a customer could also have many devices. So you can have, you know, a work phone or a personal phone. Or you could have a phone, you know, three phones in your family that you're all paying for. Okay. You could also send a text message. So you need to keep track of, you know, who sent the text message, like from which device, which phone number. Who was it being sent to? And, you know, what was the text? Hey, let's get lunch. You also have telephone calls. So calls are sent from, you know, one phone to another phone. You want to keep track of when the call was made, from which device to which device. Okay. And also there's going to be an invoice at the end. So an invoice could either be like how much data was sent, you know, sum up all the bytes of all the messages and all the other data. Okay. So you want to add customers. You want to add devices. And you want to create some messages. So this database design that you're creating, so you're creating the tables, this is going to be in third normal form. What we're going to discuss is like a minor, you know, which we'll do soon is like third normal form. It's a minor, you know, check at the second normal form. Okay. And you want to answer some questions based upon your design and your data that you put into the system. So you want to find customers with, you know, no text messages, find customers that somebody's a customer but has no phone. And you want to find the most, you know, popular number, you know, that T-Mobile has that people call. And also you want to be able to like analyze the text message, text messages. So look for text messages that are sent by people that use, you know, certain types of messages, you know, hostile words, you know, angry words, et cetera. Okay. So anytime I have the word underlined in here, you're going to replace it with your own data. So, for example, I used the word last month. You'll replace it with like last year. I have a phone number 202-456-1111. You replace it with your R number. Okay. So anything underlined is you replace. So then you are submitting, you know, to me is your database design or your create tables. Create table, create table, create table, create table. That will be normalized. The SQL that you use to add all your data, then the SQL used to answer the questions plus the output from these questions. So you have to, you know, create data to at least give you outputs. So you can't enter data and say, well, I have no output because nothing is true. You know, so you want to create data so you actually, you know, create output. Okay. So it's similar to, you know, Project 1 except you're making more tables. Okay. So my recommendation for the design, we can, you know, talk more about it, is step number one is to look at the requirements. What do you need to track? Customers, devices, text, you know, calls. And then look at some of the, you know, columns that you need to track. Don't worry about it being normalized. Then look at the outputs. What kind of, you know, questions do you have to answer? So then by looking at these questions, you're looking for different columns. Okay. Then, you know, don't worry about it being normalized. Then just, you know, begin creating some tables. Then go through first normal form and second normal form. Then you have to place all the columns into the proper table and just keep repeating that. So most of the time is spent on the design phase of the project. Then after you spend, you know, some time normalizing, then you probably end up with, like, you know, six, seven, eight tables. Okay. It's normalized. And then you start, you know, adding some data and then doing some searches. You may have to go back and make modifications to your table. Okay. So spend some time looking at this. We'll talk more about it next time. So it's similar to the, you know, first project except, you know, it's a little bit larger and it uses more of the concepts that we did since the first project. Okay. There's only one operation that we haven't done yet. And I'll just tell you what that is right now. So by searching for certain words in a message, there's an operation rather than, say, you know, equal. There's an operation called like. Okay. So if I were to say to look for the word like, quote, you know, percent, you know, it could be a hostile word, like angry. If I were to say, like, you know, search for angry, anything with a percent sign means angry anywhere in my sentence, the characters to the left and then the characters to the right. We'll talk more about it. I'm just, you know, giving you this so we'll talk more about it. So like is also used. Okay. My other recommendation is that this is back to the database and recovery in the class. I need more participation in the class. Okay. So we're going to change things up next time. You know, calling on more people. So you need to come prepared. I'm not that worried about everybody has the right answer. You have to be engaged. You have to talk. You have to participate. This is not a television show where you're just watching me. Okay. Class means you have to be actively engaged, participating. Computer science is that we all have to design and collectively come up with solutions. And then we break it and then we figure out a way of, like, fixing it. Constant improvement. Constant process improvements. Okay. What works better if we do it collectively? Okay. You're not going to like it if I just keep telling you what everything is. Okay. That's a complete waste of your time. Okay. We need to collectively perform problem solving. Okay. So you need to step up the game. You need to, you know, step things up here a little bit here. Okay. So on that happy note, I'll stick around if people have questions. I'll stop the recording.
