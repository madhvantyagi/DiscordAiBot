Okay. Let's get started. Good evening. I hope everybody is doing well today. The objective for today is to finish up Relational Algebra and Relational Calculus, specifically wanted to create a new database utilizing all the operations, including a database design so we could integrate everything together. Before we get started on a few administrative items, I almost finished the exams. I expect to have that finished tomorrow. So I'll post it on Blackboard and we can discuss it next time. So I'm almost done. So your patience is appreciated. Any other items before we get started? Okay. Professor, I don't have a grade yet. Are those coming after the exams for the people that don't have a grade yet? Yeah, I have like a few more projects left. I just prioritized the exams before the projects. Okay. Okay. So let's create another database today, utilizing all the Relational Algebra operations we had discussed. So in order to limit my rows, we have a selection. And then we have projection. Limit the attributes and the columns. We have a Cartesian product, which allows us to perform a join of two relations. Assuming we have a common attribute. We also introduced the symbol, which is our function, our aggregate function. So this will allow us to do, for example, account, average, max, sum. I want to introduce one more today, like this, which will be our rename. This specifically allows us to rename some of the attributes that we have. Okay. Okay. So help me out here. Give me another idea for a database. We did a Netflix database. We did a university. So what are some of the thoughts that you have that we could design together? What do you think? Let's go, folks. Talk. Sports team database. So what about sports? What do you want to track? Player names. Okay. What else besides player names? Just this one relation. There are numbers, salary, address, number. Okay. So like statistics for sports, you know, players, teams, scores. Okay. What are some other ideas that you have besides database for a sports team? You do like a database for like a coffee shop, maybe. So Starbucks? Yeah. Okay. So what about Starbucks? Do you want to keep track of? Like items, products, sales, employees, customers. Okay. Give me one more. What else can you think of? A library database. A library. So what are we tracking in a library? Borrowed books. Return dates. Yeah. Book titles. Okay. So you have books. You have patrons. We don't call them customers in libraries. We'll call them patrons. You have, the library has branches. You also have items that are borrowed. Borrow. Okay. Anybody have any strong preference? I kind of like the Starbucks one. Has a little bit of everything here in it. So we can get back to the library and this what's, you know, for another topic, but we can get to them eventually. Okay. So in a Starbucks database, let's define, before we start creating our relations, let's define the output. What are the searches that you want to create? Then based on your searches, the reports, then we can create a design to implement the output that you want. So now we're talking a role, a professional job title. And the job title would be a systems analyst. So the role of a systems analyst is to identify what the business requirements are for the database. Not necessarily the programmer, but somebody who will talk to the various stakeholders in the organization. People who, you know, for example, in Starbucks, talk to the store manager, talk to the general manager, somebody in finance, talk to the customers and find out what the Starbucks need in terms of reports to generate their business. In order to generate a report, you have to store certain data, certain attributes in the system. Okay. So the systems analyst's role is to define the business requirements, and then that will be given to the developer, to the programmer, and say, these are the requirements. Typically, the programmer is given the requirements. This is what you have to program exactly. This is the output. This is the input. Systems analysts will talk to the stakeholders and get the output. So define some reports. Okay. So what do you think? Let's say that you're a manager of Starbucks. What are some reports? Don't worry about the actual code. Just give it to me in English. Like yearly sales or monthly sales. Okay. So you want to identify the monthly, yearly. Do you want sales by store, sales by state, sales monthly, yearly? Do you want sales by store, sales by state, sales by zip code? What's your preference? I think zip code is better because we could see which zip code does better than the other ones. Okay. So how about we start with zip code, but maybe we'll see patterns on the city level, on the state level. Okay. But we can say, so by zip code, by city, by state, some other boundary. Okay. You want to get sales. Give me some other questions. If you're a store manager, what might you be interested in? Which product is the best-selling? Or if you also find the most popular or the least popular. Okay. What else? What are some other analysis you will need as a store manager? These are all very product-oriented questions. Productivity for certain employees, maybe. Okay. So how do you define productivity for a Starbucks employee? I guess it could be by amount of sales while an employee is on the job. Okay. So if you're a barista at Starbucks, it says how many orders you fill, like per day, per hour? Yeah. Okay. Just remember some orders could be simple, like pour a cup of coffee. Other orders could take five, 10 minutes to create because they're more complicated. So necessarily counting the number may not necessarily define complexity. So identify the number of products sold prepared by employee. What are some other questions? Okay. Can we do customer age group? Like which age buys what product and how much do you spend? You want to do an analysis of your customers. So how do we know customer's age? When they buy a cup of coffee, I'm going to ask them how old they are. We can track like customer accounts. Like if a customer signs up for like a mobile app, that's how we can track age. Okay. So we can say identify sales by customer. I'm not sure how we're going to get other demographic information about the customer. I mean, I guess they could voluntarily give you their age, but kind of unlikely. So identify sales by customer. So who's your best customer and which customer you want to target for coming in more frequently. Okay. Okay. So give me one more. So we have information about customers, information about products. Give me something about some other things that we have in the store. We also have employees, customers, products, employees. Where do you go? Amelia, Marissa, Dennis, George, Jocelyn, Sunny, Samantha. Let's go, folks. Keep talking. Maybe like which product hasn't been sold, which products haven't been sold in the last month. Okay. So identify products sold and not sold in the last month. That's kind of like a variation upon like this one, yeah. How about something about our stores? What kind of questions can we ask about the store? Which stores have the most sales? Okay. So we can say identify sales now by store. Okay. Okay. So now let's base the point on what we have in the store. Okay. So now let's base upon some of the questions that we have, then we're going to define relations. So now we're going through a typical approach as to how we create a database. So step number one is to define the output. Step number two, so we're going to define the output. So step number two, so step two is we need to start creating some relations. Okay. So let's focus on, let's go through some of the relations. So we have the customer. Okay. So don't worry about it being normalized, but what are some attributes for the customer you want to keep track of? Give me the bare minimum in order to answer that question. Okay. So let's say that they sign up for some type of, you know, like loyalty program and they get points. So we have okay. Just one comment, like during the, during the exam, you know, people just wrote in, you know, customer name. So you should always write it, you know, you know, break up the attributes in terms of like first and last. People also wrote, you know, like address should always be street, city, state, and zip. Okay. So what else besides first and last you want to know about the customer? Credit card information. Okay. What else about the customer do you want to track? Is this like concerning the ordering or just the general of the customer? First we're doing information about the person, the human being. Okay. Their phone number. Maybe that's going to be like their cell phone number. So you can send them text messages. Okay. Give me a multi-value attribute about the customer. These are all single value. Customer has one first name, one last name. They have one credit card on file. Give me a multi-value attribute. When they visited the store. Okay. But a multi-value for the customer. When they visit the store, that would be a purchase. I'm focusing on just the customer now. Give me a multi-value attribute for the customer. Their phone number. Okay. So you want to make multi-value as a phone number. How would I organize a multi-value phone number attribute? How would I write this? Where does that attribute go? Excuse me? We normalize it? Right. Where does my multi-value attribute phone go? In what relation does it go? Does it go in a customer relation or does it go somewhere else? Okay. So give me a structure for this new relation. What's in this new relation? Their phone number and also their customer ID. Okay. What's a good name for this relation? Contacts. And my CUS phone. So since I have phone number and I have CID, what else do I need in customer for this to work? Customer ID. Okay. So let's add in customer ID. So this would be my primary key over here. I want to say I have a composite primary key. So underline is my primary key. So this allows me to implement multi-value for a phone. And just to make it clear, let me give this a better name. I'm going to call it, you know, CUS-to-phone. Okay. Give me another relation. So we did our customer. So based upon the output that we need, give me another relation. Excuse me. I said stores. Okay. So we did have stores. Okay. So give me some attributes about the store that we want to keep track of. Store ID, the address, so streets, city, state, so. Okay. Okay. So this information about the store. Give me a multi-value attribute for the store. Can it be employees? Okay. So let's focus just on the store before we put, you know, employees are going to be another relation. Give me something, an attribute about the store that's multi-value. Inspection date. Okay. So inspection store. So each store has inspection. And then which store was actually inspected? And I guess the date of inspection. And then what's the results? Okay. So my inspection ID is my primary key. Store ID is going to be a foreign key. And then the results will be some type of, let's say, number, like 1, 2, 3, 4, 5. Okay. So it's multi-value. Okay. So we did stores. Stores. Give me another relation based upon the output that we need. The products. Okay. So we did products. Based upon the output that we need. The products. Okay. So we have products. Okay. So you're starting to see a pattern here. So we have products ID. So what about the products you want to keep track of? The cost. The name and the cost. Okay. Also, if you're a store located in New York City, you have some additional requirements that you have to display about the product. What's the New York City special requirements for products? The nutritional facts. Right. You have to show calories. Okay. So you have to show calories. And okay. What's a multi-value attribute for products? Well, there can be more than one value in an attribute. Is there flavors? Okay. So you have flavors. How about I just expand that just a little bit? How about we call it, you know, what the ingredients are, you know, for the product, whether it's like, you know, water, sugar, raspberry, whipped cream. So the ingredients. Okay. I guess we could say. So, so products ID. And how about the ingredient name? So let's say, you know, water, sugar, tea, whipped cream, flavoring. Okay. So then you can have many rows for each, many tuples for each product. Okay. So this is my primary key. Okay. So this is the product. Okay. Or this is more of a Starbucks question. Are all products sold at all stores? No, not necessarily. Okay. So how can we keep track of certain products that are sold at some stores, but some other products are not sold at other stores? I need to keep track of which store I need to keep track of which store a product is sold at. Could we have like a composite primary key where it's the store ID and maybe the state that they're at? Okay. So where, so give me a relation. Where would I keep track of what, in which store will that product is available? How would I track that? Okay. Well, is it, is it, you know, is it appearing customer? Yes or no? That would appear in stores. What if I do stores, then how many tuples right now, how many tuples do I have in stores? One tuple for each what? For each product? No, right now in stores, there's one tuple for each store. If I have a thousand stores, I have a thousand tuples. So if I start adding products to stores in this relation, if each product has, let's say a hundred, if each store has a hundred products, then my stores relation is going to have like, you know, like hundreds of thousands of rows. Could we make like a separate table where it'd be quantity and then like store ID and then the quantity of the products that they have? Why don't we maybe use like an existing relation before we start making new relations? Don't call them tables, call them relations. Like tables is a SQL terminology. So we're going to keep track of which stores a product is sold. How about we do it here? So this product ID, this price, this name, and why don't we say store ID? What do you think? Is that going to be normalized? So let's evaluate this. It is the products table in second normal form. Let's check that. It's not. Well, you were me here. So for products, I'm just going through it. Is product name, this is my primary key. Is product name function dependent upon product ID? For each occurrence of product ID, does there exist one and only one name, true or false? Okay, so true. So this is just going to say product only has one name, each product ID. So how about like calories? Let's say I have a large cup of Frappuccino. Is calories function dependent upon product ID? For each occurrence of product ID, there exists one and only one number for calories, true or false? Can you add condiments and stuff or no? Yeah, I guess I do agree it gets a little bit complicated. Some people could say they want to have like, you know, like three pumps of like raspberry. They can have extra this. They can have less ice and no ice. Just to keep it a little bit simple for ourselves, let's assume that customers can't customize things is, you know, just trying to keep it simple. Assuming they can't customize it, the product is what it is. This is a design. So let's say it is function dependent. Okay. But how about store ID? Is store ID function dependent upon product ID? For each occurrence of product ID, there exists one and only one store ID, true or false? False. Right. Because we said, again, it's totally our design. We can make any rules we want. So we said that, you know, products should be available in different stores. So since this is not function dependent, that means this little attribute needs to be removed. Okay. So now a new relation is to store ID. It's like down here now. And then we also have over here the product ID. So then this goes away. So now we can keep track of the product store. Now, you've got to think like Starbucks now. Does Starbucks sell the same product at the same price in all the stores? Or do they charge different prices for the same product at different stores? They charge different prices at a different location. But of course, if I have a store on the Upper West Side, you know, because there's a higher income there, I'm going to charge them more. If I have a Starbucks located like somewhere else in middle class neighborhood, I'll charge them less. You know why? Because I could. Okay. So how do we keep track of different stores at different products? I want to have different prices for different products in different stores. How are we going to track that? Using the zip codes or the city that the store is in? You could do that. Let's say that I want to, I want to decide. I don't want to always say a certain zip code will always have higher prices. So how about we just modify it just like slightly and just say over here, we say. So now we say this price for this product at this store. At this store. Then we have one tuple for every product in every store that goes down. And then we could remove the product price, remove it from there. We can certainly decide to keep the same products, the same price everywhere. That's our choice. But if I did want to make different prices, we could do something like this. Okay. So we got, so we did products. And so which relation is missing? We have customers, stores, products. What else do we need here? Okay. Staff. We're not, we're not running robots here. So let's do, let's do some staff. Okay. So staff ID. And just for simplicity, I'm not going to keep track of the staff's address, but normally I would because I have to mail them, you know, their, you know, their payroll checks. Okay. Staff first. So how would I keep track of which store staff are assigned to? Okay. Will the staff assignments be single value or multivalued? How do you want to set up your Starbucks? It can be multivalued. So we can have different employees working at different locations. Okay. So we have staff, store, staff ID, store, ID. Okay. So now we have staff assignments. Okay. I just want to introduce another type of attribute. So right now we have a single value attribute, you know, like first name and last name. You have a multivalue attribute, you know, like a phone number. Okay. We also have a primary key attribute. We have a foreign key attribute, and we have a composite primary key. We have two attributes that form a, okay. So there's one more attribute type, called a derived attribute. A derived attribute is an attribute which is a calculation based upon, you know, data from other attributes or another attribute plus some type of other calculation. So for example, let's say the final purchase price of a product. What's the calculation for the final purchase price? Let's say in New York City. Give me the formula. Give me the formula. Is it sales tax, condiments? So you have the product price, then you have, you know, plus sales tax, which is equal to, so the final price. So the final price would be a derived attribute based on the product price, and then do some types of, like I said, like, you know, 8.75%, and that would be there. I was up in, as a side note for sales tax, I was up in Montreal, you know, Canada, like last year, and they have an interesting sales tax. So their final price is equal to the product price, so plus the city tax, which is city of Montreal tax. Then they have a, Montreal is in the province of Quebec, so they have a Quebec tax, right? Then, believe it or not, they actually have a third tax. I think they, what I translated from French to English is actually a tax on the tax. They call it a tax tax. So they have, like, a tax on the whole thing, and then they have a country tax, like a consumption tax. They should just come to the States and buy some stuff and then go back? Yeah, usually I just, like, buy my food in the United States and bring it with me across the border, but their final price is, you know, I'm just giving an example, just a more complicated calculation. This plus this tax plus this tax plus that tax, okay? So this is called a derived attribute, okay? So where can I add a derived attribute? Why don't we hold on to that one, okay? Derived attribute. We'll add it a little bit later. Okay, so we have the staff. So we have, we did this part right here. So finally, we need one more, which is always going to be my last relation. Now that I have the customers, customers walk into stores, stores are inspected, customers look at the menu, and they say, well, that looks interesting. They're talking to staff who are in the store. Hi, how are you? I need one more relation. Is that a sales relation? Right. It is some type of, like, purchase, some type of transaction. Because right now, I'm just standing around the store doing nothing. I'm actually, it's actually do something. So let's call it like some, let's say a transaction. So what are the attributes in the transaction? Who, what, where, when? Who is performing the transaction? Customer. What is being purchased in this transaction? Product. Where is the product being purchased? In the store. Like, when is the product being purchased? So let's say date of transaction. So let's say date of transaction. And then finally, my derived attribute will be my sales price, which will be some calculation of the price of the product plus the sales tax minus any type of discounts that the person may, you know, might have. What's my primary key in the transaction relation? And we have a transaction ID? Sure. Let's move it to the left here. A little bit easier. So we could do, we can do it. We have a transaction ID. Then we have a customer ID, which is my foreign key product ID, which is the foreign key store ID, which is the foreign key. And this is my derived. So transaction, because it has all of these foreign keys, typically you do this last. Because I can only do it after the other relations are created. Okay. So we have, so these are my relations. Customer, customer phone, stores, inspection, products, inspection, products, products ingredients, and product store, staff, transaction, and staff store. Okay. A lot of relations here. So let's start doing some questions now. Get rid of all this. Okay. So let's take a look at our list here. Okay. How about we do number five? Identify sales by store. So what do you want in your output? What should the output look like? Store ID and their sales. Okay. So the output will look something like store ID, and then I could have sales. So store, I'll say 100 sales of 50,000. Store ID 107, 150, 727. So I have one row per stores. We can clean this up a little bit and replace 100 with, you know, another value, but I want to get this type of output. So this sales is what attribute? I need to know what relations to search to answer this question. So where do I get these two columns from? Where do sales come from? The sum of sales price. Okay. So I could take a look at this. Like I say, so I would want to do sum of sales price. So where does store ID come from? Which relation? The store relation and transaction relation. Okay. So I have right here. So I have store ID. So you got a little bit lucky on this one. So you have one relation transaction. I have the store ID and I have the sale price. Okay. So how do I get one row for each store? And then within each store, I want to total, I want to sum up sales price. So which of my operations will allow me to do that? You know, five. Okay. So we can try doing aggregate function over here. So if I were to do by aggregate function, and if I were to say, so the left side where I want to have my subtotals, so I want to have one row for each store ID. So I say store ID, that's the left. Then the right side will be what function do I want to do here? What's my function? Sum on what attribute? Sales price. Okay. From which relation? And transaction, and then send the output to a new relation. Let's say we call it answer. And then, you know, so this will display store ID as the first column here. Some, this would be the second column and this aggregate function group by will do a break. Every time I come to a new distinct store ID, it will create a new row from the relation or transaction. Let's say I want to say, I want to change this a little bit. I want to say identify sales by store in the last year. So how would I modify that? So in the last year, what operation allows me to limit the tuples? Right now, I'm looking at every tuple in the trans relation. I want to look at our only selected tuples. Sounds like a job for which operation? The selection. Okay, so selection, so I'm going to select a tuple. The selection. Okay, so selection. I want to limit my tuples. So where do you want to do your select? You want to say before, on the same line, or after? It should be before. Okay, so remember, okay, so remember, remember this is my output. My output is display sales by store. So I have to first limit the tuples. I don't want to do every tuple in trans. So let's do it before. Okay, so I don't like that. Okay. So selection from which relation? Remember, I'm looking for sales in the last year. Which relation? The date. Well, date is the attribute. Which relation am I searching? Okay, so my search will be where date of transaction in the last year. So it sounds out the date of transaction greater than or equal to what's today's date? October 16th. Greater than or equal to 10, 16, 22. And date of transaction less than or equal to 10, 16, 23. Less than or equal to 10, 16, 23. So this has to be a true statement. And this has to be a true statement. So send this. I only want these tuples in trans. I don't want the last 50 years. I just want the last year. And then what gets changed in the second line? What's changed in the second line? Trans to A. Right, so the relation is no longer trans. Now it's called what? A. Right, so it comes from that. Okay, so in the last year. Okay. Okay, so let's do another question. Okay, how about identify the number of products prepared by employee? Okay, how do you want your output to look? As a manager of the store, what do you want the output to look like? Employee ID and then the number of products. Okay. Okay, how about we just said number of products prepared by the employee. Okay, how about we just said number of products prepared by the employee. You know, I don't want just the beginning of time here. So how about we say in the last month. Okay, so we have two columns. Employee number 500 did 67 products. Employee number 902 did 1,112. That person worked more shifts. This person was like a part-time employee. So I have one tuple for each employee. Okay, so now that we have the output, let's figure out where, which relation do I get this from? So where do we keep track of which employee was involved in the sales, in preparing the purchase? Where do we keep track of which employee was involved in preparing the purchase? Transaction. Okay, so in transaction. So in transaction, we have who the customer was, who made the purchase, what was being purchased, the location of the purchase, what store, when it happened, and what the price was. There's nothing here about who, which barista prepared it. Barista prepared it. We have a little flaw in our design here. How do you want to fix that? Okay, so we can add staff ID. So I'm just going to take this off over here. So comma. Staff ID. So let me ask you a, the business requirements of Starbucks. How many employees does it take to prepare a drink? Is it one or two or three? How do you want to track this? And if there are, if there is more than one, like who do you want to give credit to? Can we normalize it? Why? And you need to know what the Starbucks business requirements are. So does it take one person to prepare a purchase or does it take more than one? There's no right or wrong answer. Just tell me which one you want to do. More than one because then there's the cashier. Okay, so do you want to give credit for the cashier or do you want to give credit to the barista who prepares the drink? Barista. Barista. Okay, so you want to make it, how about we make it single value? We just give credit to one person for preparing the product. Yes, the cashier was involved, but I think, but then if that's the case, the cashier would actually be involved in every transaction throughout the day. So I don't know. How about we just give credit to the barista because, you know, they're actually doing more work. Okay. Although working the cashier from having done that is pretty complicated also. So, okay. So how about we add staff ID over here to the transaction, single value. So now this comes from the employee ID comes from the trans table. And where do we keep track of the number of products that were prepared? Which relation do we track that in? Which relation do we track that in? Question is, keep track of the number of products prepared. Where do we track that? Transaction. Okay. How many tuples are in the transaction relation? One tuple for each what? Each transaction. Each transaction. Okay. So if I purchase a muffin and two cups of coffee, how many tuples will be in the transaction relation? Three. Three. And if they were all prepared by that staff person, the barista, that person will get credit for three. So how do I get the number three? What, what, what operation do we know allows me to get the number three? Aggregate function sum. Right. It's one count. I want to count the tuples. Remember, sum will sum up, you know, you know, the, the, the values that are in an attribute, but counting will count the tuples. Okay. So if I just simply count the tuples in the transaction relation, then I could do that. Okay. So let's count the count in the transaction relation. Okay. But I also want to do in the last month, where do we track in the last month? Where do we track in the last month? Date of transaction. Correct. So you have date of transaction. Okay. So give me a selection. Let's do step number one in the last month. Step number one is first limit the tuples. So selection of what? Date of transaction. Give me the, give me the search. Give me the search. Greater than or equal to 9, 16, 2023. And less than, well, and less than or equal to 10, 16, 2023. From which relation? Trans. Okay. So why don't we send this one to a relation called last? Yeah. Okay. So then now that we did this part in the, in the last, not the last year, I mean, not the last year, last month, sorry. The last month. And so we did this part last month. So I want to get this output now. So it sounds like similar to last time. So we do one, one, sorry. So we do this symbol. So the left side of my function is going to be what? The left side is what? Employee ID. And then the right side is going to be. Count. So let's say transaction ID from. So let's say transaction ID from which relation? Send this output to answer. And send this output to answer. Okay. But the only problem is, is that my output will look like this. Count TID. And then it will, it will have. Employee ID, 500, 902, 67, 1, 1, 1, 2. But I want the output to be number of products. Right now, it just outputs, you know, this, that's my output. So I need to be able to, I want to rename my column label. So we have a new operation. Which, you know, clean things up, makes it look a little bit prettier. So rename, the syntax for rename is. What is the. So what is the. Attributes that you want to rename it to. So I want to say, let's say. Employee ID, comma. And. And. And. And. And. And. Comma. And I want to say number of products. Okay. And then I want, then I include everything that I have. Over here. So I want to say. Employee ID. Function. Function. Count T I. The. Last one. And then all this would go to a new relation called. Answer. Okay, so this becomes the new label. You know, for that. This becomes the new label for. This number of products. Okay, first and second. And then the employee ID that renames this number of products renames. That. Okay. And then everything else stays the same. Okay, so this rename. You're pretty much always going to use the rename in your output. So it makes it look. Presentable. We change the column labels. So let's do another question. That we have here. About number one. That defies the. Monthly sales by. Zip code. How about we just play. The zip. In this column. So we have the. Let's say the store address. Their address here. And so total sales. So zip code 11367. Store address. And then. Zip code 11367. Store address 902. Main Street. Total sales. And then 11367. That's another store. At 14. 14. Santa Boulevard. And total sales of 895,000. So I have one row per zip code. And within the zip code, I have. The store address. So this is my output. Okay, so let's go through it. What step number one. Where do I get. Total sales from which relation. From the sales relation. Okay, so right right here. So I have sales price. Okay, so this is going to be from the. Transaction. Sales price. Okay, I also where do I get the zip code. Where this product was purchased. Where this product was purchased. But if I get the zip code where the product was purchased. On the zip attribute from store. Okay, so I have stores up here. And here's my. Zip. Okay, but this just lists all the stores in the United States of America. To have one tuple for each store in the United States. But the question was, I want to say only stores. Here in this column. Stories that actually made a purchase. Where do we keep track of. Where a product was purchased. Is it from the transaction relation. Okay, so, so, so what, so what attribute in transaction keeps track of where. The product was purchased. The transaction ID and store ID. Right that store ID. But I don't want. I don't want store ID in my output. In my output, I want the zip. And I want the address. So the transaction only has. Store ID. I don't have zip code in transaction. I don't have address in transaction. Sounds like a job for what. Cartesian product. So Cartesian product trans with what. With stores. With stores. What's the, I could only do a trans, a Cartesian product between trans and stores. If what's true. If stores that store ID is equal to. Trans store ID. Correct. Another way of saying it was, I need to have a common attribute. Does stores and trans have a common attribute. The storage trans have a common attribute. Yes, store ID. Right, so store ID. Store ID. Okay, because that will then give me, I need to say, I need to do the streets. And I need to display the zip for only stores that actually did a sale. So I need to have trans. Okay, so let's, let's do that. So I want to do a, a Cartesian product between. Store Cartesian product transaction. But I want to only, I want to not include disjoint rows. So I want to say, you know, select store that store ID is equal to. Trans dot. Only include those tuples. Okay. So now. I have trans includes my total sales. Store includes the address and zip, and then a includes every attribute store and every attribute in trans. Okay. Now what? We have to get the sum of the sales. Okay, the 1, the 1 thing that's missing in this output, I just realized it. How many tuples are going to be the way I wrote this? How many tuples are going to be in this output? 1 tuple for each one. For each zip code. Right for each, for each store and every zip code. But my question always go back to the question. Never forget what your manager asks you to do. Keep revisiting the question. What was the question? Which zip code I have the highest sales. No, I said monthly sales. Okay. So, which means that these 2 rows. Or for, let's say, you know, the month of September. That's the monthly sales. Then I would have another row. With the. The August sales. And another row for the, you know, October sales and the July sales for the June sales. So, I have to add another column here. Then the. Like, for the month. Okay, so how do I get this, this, where do I, where do I get this from? Like. When the sale happens. So data transaction. Over here, so we can do the. Do the aggregate. Function, so the left side. Is going to be the, the month. So let's do the. So you have a function called month that will just return, you know, September 23 and not the actual date comma. It will be. So zip code. And then I want to do the. Store address, which is. Street. Then the function, then the last column will be some. And then I can do the, you know, rename. So this is going a little bit like, you know, to the left over here. I want to do the. Rename, so this is going a little bit like, you know, to the left over here. I want the first column to say. Month. Want the next column to say. Zip. Next column to say store address. And the fourth column display total sales. Okay, so all this just goes, you know, I just ran out of space here, you know, goes over there. And then this whole part, you know, here goes like, you know, afterwards. And then send this output to. Answer. So then this. Will create, you know, this output. That we have here, and this Cartesian product allowed us to the 1st time that we had. Attributes from 2 relations. That we needed. Okay. Okay, so. This is. Yeah, we have used the relationship. Yeah, we have used the relation in our answer. Like, some total sales. Right, so a, so you're right, so we never, we never used a, so as you go where. After some total sales, right? Hey, thank you. And also the text over there. You're my compiler. Thank you. Okay. Okay, so we were starting to utilize and integrate, like, all the different relational algebra and relational calculus. Operations. And also, I just to be clear, I introduced the word relational calculus. So the relational calculus is, you know, it's like this part right here. And this is the relational algebra. But. Okay. So we did a lot today. I'll, I'll stick around. The next topic that we're moving towards is a topic known as concurrency, which is the process of having many transactions operate concurrently at the same time. And you want to see that if we have two users, two transactions trying to access the same table and the same row, how will that affect our outputs? Does it give us the correct answer? Does it give us the wrong answer? So if we have, you know, two users trying to access the same, let's say balance, you know, you know, how does that affect the output? You have to put a process into place for all that. Okay. So I'll stop the recording and stick around here.
